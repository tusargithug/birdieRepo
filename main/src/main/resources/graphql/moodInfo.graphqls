schema {
    query: Query
     mutation: Mutation
}

type Query {
  moodInfoById(id: ID): MtMoodInfo
  getAllMoodInfo:[MtMoodInfo]
  getAllMoodIntensity:[MtMoodIntensity]
  getAppUserById(id:ID):AppUser
  getAllAppUsers:[AppUser]
  mtRoleById(id:ID):MtRoles
  getAllMtRoles:[MtRoles]
  getAllCategory:[Category]
  getAllCourse:[Course] 
  getAllFileEntity:[FileEntity]
}

type Mutation {
  createAppUser(input :AppUserDto): String!
   updateAppUser(input:AppUserDto!): String!
   deleteAppUserById(id:ID):String!

   createUserMoodCheckIn(input :MoodSourceIntensityRequestDto):String!
   createUserMoodSourceCheckIn(input :MoodSourceIntensityRequestDto):String!
   deleteUserMoodCheckInById(id:ID):String!
    deleteUserMoodSourceCheckInById(id:ID):String!
    createUserCourse(input:UserCourseDto):String!
    createCategory(input:CategoryDto):String!
    updateCategory(input:CategoryDto):Category
    deleteCategoryById(id:ID):String!    
    createCourse(input:CourseDto):String!
    updateCourse(input:CourseDto):Course
    deleteCourseById(id:ID):String!
    createFileEntity(fileId:Int!,name:String!,contentType:String!,fileType:String!):String!
    updateFileEntity(fileId:Int!,name:String!,contentType:String!,fileType:String!):FileEntity
    deleteFileEntityById(fileId:ID):String!
 }

type MtMoodInfo {
    id: ID!
    name: String
    emoji:String
    description:String!
   intensities:[MtMoodIntensity]

}

type MtMoodIntensity{
    id: ID!
    name: String
     emoji:String
}

type MtRoles{
     id: ID!
    name: String
}


input AppUserDto{
firstName:String
lastName:String
email:String
mobile:String
alternateMobile:String
empId:String
}



type AppUser{
id:ID!
firstName:String
lastName:String
email:String
userName:String
mobile:String
alternateMobile:String
empId:String
}





type FileEntity{
fileId:ID!
contentType:String!
name:String!
fileType:String!
employees:[Course]
}

