schema {
    query: Query
    mutation: Mutation
}

type Query {
    moodInfoById(id: ID): MtMoodInfo
    getAllMoodInfo:[MtMoodInfo]
    getAllMoodIntensities:[MtMoodIntensity]
    getAppUserById(id:ID):AppUser
    getAllAppUsers:[AppUser]
    mtRoleById(id:ID):MtRoles
    getAllMtRoles:[MtRoles]
    getAllCategory:[Category]
    getAllCourse:[Course]
    getAllUnit:[Unit]
    getAllChapters:[Chapter]
    getLearnPath(input:UnitDto):PaginationResponse
    getAllSitePagination(input:SiteDto):PaginationResponse
    getAllTeamPagination(input:TeamDto):PaginationResponse
    getAllCountry:[MtCountry]
    getAllCities:[MtCity]
    getAllRegions:[MtRegion]
    getCounsellorSlot:[CounsellorSlot]
    getAllShiftTimings:[ShiftTimings]
    getCounsellorSlotById(id:ID!):CounsellorSlot
    getAllCounsellor(input:CounsellorDto):[Counsellor]
    getAllVendor:[Vendor]
    getVendorById(id:ID):Vendor
    getAllVendorPagination(input:VendorDto):PaginationResponse
    getAllAssessment:[MtAssessment]
    getAssessmentById(id:ID!):MtAssessment
    getQuestionById(id:ID!):MtQuestion
    getAnswersByQuestionId(id:ID!):[MtOptions]
    getAllQuestions:[MtQuestion]
    getOptionById(id:ID!):MtOptions
    getAllOption:[MtOptions]
    getAppointmentById(id:ID):UserAppointment
    getUserAppointmentCountById(id:ID):UserAppointmentResponse
    getAllAppointment:[UserAppointment]
    getCounsellorById(id:ID):Counsellor
    getAllEnumRoles:[Roles]
    getMiniSessionById(id:ID!):MiniSession
    getAllMiniSession:[MiniSession]
    downloads(id:String):FileDocument
    getMoodInfoById(id:ID):MtMoodInfo
    getAllMoodCheckIn:[UserMoodCheckIn]
    getMoodSourceById(id:ID):MtMoodSource
    getAllMoodSources:[MtMoodSource]
    getAllGroupDetails:[GroupDetails]
    getGroupById(id:ID):Groups
    getAllMiniSessionPagination(input:MiniSessionDto):PaginationResponse
    getAllEnumTags:[TagType]
    getAllGroups:[Groups]
    getAllWorksheet:[MtWorksheet]
    getWorksheetById(id:ID!):MtWorksheet
    getAllPsychoEducation:[MtPsychoEducation]
    getPsychoEducationById(id:ID!):MtPsychoEducation
    getPsychoEducationPagination(input:PsychoEducationDto):PaginationResponse
    getAllMeditation:[MtMeditation]
    getMeditationById(id:ID!):MtMeditation
    getAllAppUserByRoles(input:AppUserDto):[AppUser]
    getAllAppUserPagination(input:AppUserDto):PaginationResponse
    getAllMeditationPagination(input:MeditationDto):PaginationResponse
    getAllWorkSheetPagination(input:WorksheetDto):PaginationResponse
    getAllChapterPagination(input:ChapterDto):PaginationResponse
#    getAllMoodIntensitiesByMoodInfoId(id:ID!):[MtMoodIntensity]
    previewAlertNotification(input:AppUserDto):RoleWiseCountResponse
    getTeamById(id:ID):Team
    getSiteById(id:ID):Site
}

type Mutation {
    createAppUser(input :AppUserDto): String!
    updateAppUser(input:AppUserDto!): String!
    deleteAppUserById(id:ID):String!
    createUserMoodCheckIn(input :MoodSourceIntensityRequestDto):String!
    createUserMoodSourceCheckIn(input :MoodSourceIntensityRequestDto):String!
    deleteUserMoodCheckInById(id:ID):String!
    deleteUserMoodSourceCheckInById(id:ID):String!
    createUserCourse(input:UserCourseDto):String!
    createCategory(input:CategoryDto):String!
    updateCategory(input:CategoryDto):String!
    deleteCategoryById(id:ID):String!
    createCourse(input:CourseDto):String!
    updateCourse(input:CourseDto):String!
    deleteCourseById(id:ID):String!
    createRole(input:RolesDto):String!
    updateRole(input:RolesDto):String!
    deleteRoleById(id:ID):String!
    updateUnitById(input:UnitDto):String!
    updateChaptersById(input:ChapterDto):String!
    saveUnit(input:UnitDto):String!
    saveChapter(input:ChapterDto):String!
    deleteUnitById(id:ID):String!
    deleteChapterById(id:ID):String!
    createTeam(input:TeamDto):String!
    updateTeam(input:TeamDto):String!
    deleteTeamById(id:ID):String!
    saveSite(input:SiteDto):String!
    updateSite(input:SiteDto):String!
    deleteSiteById(id:ID):String!
    saveSiftTimings(input:ShiftTimingsDto):String!
    updateSiftTimings(input:ShiftTimingsDto):String!
    deleteSiftTimingsById(id:ID):String!
    saveCountry(input:CountryDto):String!
    #    uploadCountryData(file: CountryDto):String!
    updateCountryById(input:CountryDto):String!
    deleteCountryById(Id:ID):String!
    saveCity(input:CityDto):String!
    #    uploadCityData(file: CountryDto!):String!
    updateCityById(input:CityDto):String!
    deleteCityById(id:ID):String!
    saveRegion(input:RegionDto):String!
    #uploadRegionData(file:Upload!):String!
    updateRegionById(input:RegionDto):String!
    deleteRegionById(id:ID):String!
    createCounsellorSlot(input:TimeSlotDto):String!
    createCounsellor(input:CounsellorDto):String!
    updateCounsellorById(input:CounsellorDto):String!
    deleteCounsellorById(id:ID!):String!
    saveVendor(input:VendorDto):String!
    deleteVendorById(id:ID):String!
    updateVendor(input:VendorDto):String!
    rescheduledCounsellorSlot(input:TimeSlotDto):String!
    cancelCounsellorSlot(id:ID!):String!
    createQuestion(input:QuestionDto):String!
    updateQuestionById(input:QuestionDto):String!
    deleteQuestionById(id:ID):String!
    createOptions(input:OptionsDto):String!
    updateOptionById(input:OptionsDto):String!
    deleteOptionById(id:ID):String!
    createAssessment(input:AssessmentDto):String!
    updateAssessmentById(input:AssessmentDto):String!
    deleteAssessmentId(id:ID):String!
    createAppointment(input:TimeSlotDto):String!
    rescheduledUserAppointment(input:TimeSlotDto):String!
    createMiniSession(input:MiniSessionDto):String!
    updateMiniSession(input:MiniSessionDto):String!
    deleteMiniSessionById(id:ID!):String!
    createGroup(input:GroupsDto):String!
    deleteFiles(id:String):String
    updateMoodInfoById(input:MoodInfoDto):String!
    deleteMoodInfoById(id:ID!):String!
    updateMoodSourceById(input:MoodSourceDto):String!
    deleteMoodSourceById(id:ID!):String!
    updateGroupById(input:GroupsDto):String!
    saveGroupDetails(input:GroupsDto):String!
    saveFileDetails(input:FileDetailsDto):String!
    uploadFile(file: Upload): String!
    createWorksheet(input:WorksheetDto):String!
    updateWorksheetById(input:WorksheetDto):String!
    deleteWorksheetById(id:ID!):String!
    createPsychoEducation(input:PsychoEducationDto):String!
    updatePsychoEducationById(input:PsychoEducationDto):String!
    deletePsychoEducationById(id:ID!):String!
    createMeditation(input:MeditationDto):String!
    updateMeditationById(input:MeditationDto):String!
    deleteMeditationById(id:ID!):String!
}

scalar Upload
type MtMoodInfo {
    id: ID!
    name: String
    emoji:String
    description:String!
    intensities:[MtMoodIntensity]
    isActive:Boolean
    intensityName:String
}

type MtMoodIntensity{
    name:String
    description:String
    emoji:String
    mtMoodInfo:MtMoodInfo
    sequence:Int
    score:Float
}

type MtRoles{
    id: ID!
    name: String
}
type UserAppointmentResponse{
    id:Int
    availableAppointmentCount:Int
    rescheduledAppointmentCount:Int
    canceledAppointmentCount:Int
    totalAppointmentsCount:Int
    blockedAppointmentCount:Int
    appUser:AppUser
}

input AppUserDto{
     id:Int
     email:String
     userName:String
     mobile:String
     password:String
#     searchKey:String
     isActive:Boolean
     empId:String
     roles:String
     siteId:Int
     dateOfJoining:String
     alerts:String
     pageSize:Int
     pageNumber:Int
     addedOn:String
     countryCode:String
     gender:String
#     isTeamLeader:Boolean
     shiftStartAt:String
     shiftEndAt:String
    isTeamLeader:Boolean
    teamManagerIds:[ID]
    teamLeaderIds:[ID]
    sortUserName:Boolean
    pictureId:String
    searchKey:String
    teamId:Int
}
enum Roles{
    NONE
    EMPLOYEE
    WELL_BEING_MANGER
    COUNSELLOR
    VENDOR
    ADMIN
    DIRECTOR
    TEAM_MANAGER
    TEAM_LEADER
    SITE_MANAGER
}


type AppUser{
    id:Int
    empId:String
    userName:String
    countryCode:String
    mobile:String
    email:String
    password:String
    dateOfJoining:Date
    roles:Roles
    site:Site
    counsellorSlotList:[CounsellorSlot]
    alerts:Alerts
    gender:Gender
    shiftStartAt:LocalTime
    shiftEndAt:LocalTime
    shiftTimings:String
    uploadPicture:FileEntity
    searchKey:String
}

type FileEntity{
     fileId:String
     fileName:String
     fileType:String
     fileSize:Int
     fileContentType:String
}
enum FileType{
    VIDEO
    IMAGE
    DOCUMENT
    PDF
    AUDIO
    ZIP
    EMOJI
    NONE
}
type ShiftTimings{
    id: ID!
    shiftName:String
    site:Site
    shiftStatAt:LocalTime
    shiftEndAt:LocalTime
    team:[Team]
    isActive:Boolean
}
input ShiftTimingsDto{
    id:Int
    siteId:Int
    teamId:Int
    shiftName:String
    shiftStatAt:LocalTime
    shiftEndAt:LocalTime
    counsellorId:Int
    status:Boolean
}
type CounsellorSlot{
    id: ID!
    counsellor:Counsellor
    startTime:LocalTime
    endTime:LocalTime
    slotDt:Date
    slotShift:SlotShift
    days:DayOfWeek
    slotStatus:SlotStatus
    isActive:Boolean
}
type Counsellor{
    id:Int
    counsellorName:String
    empId:String
    emailId:String
    countryCode:String
    mobileNumber:String
    designation:Roles
    shiftStartAt:LocalTime
    shiftEndAt:LocalTime
    shiftTimings:String
    counsellorSlots:[CounsellorSlot]
    site:Site
    educationalDetails:[String]
    languages:[String]
    bio:String
    gender:Gender
}
scalar LocalTime
scalar Date

enum SlotShift{
    MORNING
    AFTERNOON
    EVENING
}
enum SlotStatus{
    AVAILABLE
    BOOKED
    BLOCKED
    DELETED
}

enum  DayOfWeek{
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum Alerts{
    RED_ALERT
    ORANGE_ALERT
    GREEN_ALERT
    NONE
}
input CounsellorDto {
     id:Int
     educationalDetails:[String]
     languages:[String]
     siteId:Int
     designation:String
     bio:String
     counsellorName:String
     sortCounsellorName:Boolean
     empId:String
     emailId:String
     mobileNumber:String
     pageNumber:Int
      pageSize:Int
     addedOn:Boolean
     searchKey:String
     isActive:Boolean
     shiftStartAt:String
     shiftEndAt:String
     shiftTimings:String
     countryCode:String
     gender:String
}

type Vendor{
    id:ID!
    POC:String
    vendorName:String
    vendorId:String
    isActive:Boolean
    mobileNumber:String
    countryCode:String
    site:[Site]
}
input VendorDto{
    id:Int
    siteIdList:[ID]
    POC:String
    vendorName:String
    sortVendorName:Boolean
    pageNumber:Int
    pageSize:Int
    addedOn:String
    sortBy:String
    site:String
    designation:String
    email:String
    mobileNumber:String
    vendorId:String
    searchKey:String
    countryCode:String
}

type UserAppointment {
    id:Int
    startTime:LocalTime
    endTime:LocalTime
    slotDate:Date
    slotShift:SlotShift
    days:DayOfWeek
    slotStatus:SlotStatus
    appUser:AppUser
    counsellor:Counsellor
    isCurrentAppointment:Boolean
    isActive:Boolean
}

type Groups{
    id:ID
    groupName:String
    groupDetailsList:[GroupDetails]
    miniSession:MiniSession
    fileDetails:[FileDetails]
}
type MiniSession{
    id:ID
    isActive:Boolean
    tags:[String]
    groupsList:[Groups]
    miniSessionName:String
    createdOn:String
}
type FileDetails{
    id:ID
    isActive:Boolean
    fileId:String
    fileName:String
    fileContentType:String
}
input GroupsDto{
    id:Int
    groupId:Int
    groupName:String
    text:String
    miniSessionId:Int
    isActive:Boolean
    tags:[String]
    fileId:String
    isImage:Boolean
    isPdf:Boolean
    isVideo:Boolean
    isAudio:Boolean
    isZif:Boolean
    isText:Boolean
    isEmoji:Boolean
}
input FileDetailsDto{
    id:Int
    fileId:String
    fileName:String
    fileType:String
    fileSize:Int
    contentType:String
    groupId:Int
}

type RoleWiseCountResponse{
    teamLeaderCount:Int
    teamManagerCount:Int
    directorCount:Int
    seniorManagerCount:Int
    accountManagerCount:Int
    generalManagerCount:Int
}
input MiniSessionDto {
    id:Int
    tags:[String]
    miniSessionName:String
    isActive:Boolean
    pageNumber:Int
    pageSize:Int
    sortMiniSessionName:Boolean
    searchKey:String
}
input MoodInfoDto{
    id:Int
    sequence:Int
    moodType:String
    intensityName:String
    emoji:String
}

enum MoodType{
    POSITIVE
    NEGATIVE
    NEUTRAL
    NONE
}

type UserMoodCheckIn{
    appUser:AppUser
    mtMoodInfo:MtMoodInfo
    userMoodSourceCheckedIn:UserMoodSourceCheckedIn
    mtMoodIntensity:MtMoodIntensity
    description:String
}
type MtMoodSource{
    name:String
    description:String
    emoji:String
    sequence:Int
    category:CategoryType
}
enum CategoryType{
    WORK
    SELF
    NONE
    WORK_SELF
}
type UserMoodSourceCheckedIn{
    appUser:AppUser
    mtMoodSourceList:[MtMoodSource]
    description:String
}
input MoodSourceDto{
    id:Int
    sequence:Int
    name:String
    description:String
    emoji:String
    category:String
}

type FileDocument{
    fileId:String
    fileName:String
    fileContentType:String
    fileSizeInBytes:String
    fileType:String
    publicUrl:String
    file:Byte
}
scalar  Byte

type GroupDetails{
    fileId:String
    Text:String
    isImage:Boolean
    isZif:Boolean
    isPdf:Boolean
    isVideo:Boolean
    isAudio:Boolean
    isEmoji:Boolean
    isText:Boolean
    groups:Groups
}
enum TagType{
    NONE
    PTSD
    STRESS
    ANXIETY
    VT
    BURNOUT
    DEPRESSION
}

type MtWorksheet{
    id:Int
    name:String
    description:String
    file:FileEntity
    isActive:Boolean
}

input WorksheetDto{
    id:Int
    name:String
    description:String
    isActive:Boolean
    fileId:String
    fileType:String
    pageNumber:Int
    pageSize:Int
    sortName:Int
    createdOn:Int
}

type MtPsychoEducation{
    id:Int
    name:String
    description:String
    isActive:Boolean
    file:FileEntity
    createdOn:String
}

input PsychoEducationDto{
    id:Int
    name:String
    description:String
    isActive:Boolean
    fileId:String
    pageNumber:Int
    pageSize:Int
    sortPsychoEducationName:Boolean
    createdOn:String
}

type MtMeditation{
    id:Int
    name:String
    meditationVideoLink:String
    isActive:Boolean
    file:FileEntity
    createdOn:String
}

input MeditationDto{
    id:Int
    name:String
    meditationVideoLink:String
    isActive:Boolean
    fileId:String
    createdOn:String
    sortName:Boolean
    pageNumber:Int
    pageSize:Int
    fileType:String
    searchKey:String
}
enum Gender{
    MALE
    FEMALE
    OTHERS
    NONE
}

type PaginationResponse{
    siteList:[Site]
    teamList:[Team]
    vendorList:[Vendor]
    appUserList:[AppUser]
    miniSessionList:[MiniSession]
    meditationList:[MtMeditation]
    worksheetList:[MtWorksheet]
    chapterList:[Chapter]
    psychoEducationList:[MtPsychoEducation]
    unitList:[Unit]
    totalPages:Int
    totalElements:Int
}

type MapEntry {
    key: String!
    value: [Object!]
}
scalar Object