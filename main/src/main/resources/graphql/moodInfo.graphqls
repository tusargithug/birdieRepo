schema {
    query: Query
     mutation: Mutation
}

type Query {
    moodInfoById(id: ID): MtMoodInfo
    getAllMoodInfo:[MtMoodInfo]
    getAllMoodIntensity:[MtMoodIntensity]
    getAppUserById(id:ID):AppUser
    getAllAppUsers:[AppUser]
    mtRoleById(id:ID):MtRoles
    getAllMtRoles:[MtRoles]
    getAllCategory:[Category]
    getAllCourse:[Course]
    getAllUnit:[Unit]
    getAllChapters:[Chapter]
    getLearnPath(input:UnitDto):[Unit]
    getAllSitePagination(input:SiteDto):[Site]
    getAllTeamPagination(input:TeamDto):[Team]
    getAllSite:[Site]
    getAllTeam:[Team]
    getAllCountry:[MtCountry]
    getAllCities:[MtCity]
    getAllRegions:[MtRegion]
    getAllVendor:[Vendor]
    getVendorById(id:ID):Vendor
    getAllVendorPagination(input:VendorDto):[Vendor]
    #    getCounsellorSlot(empId:String):[CounsellorSlot]
}

type Mutation {
    createAppUser(input :AppUserDto): String!
    updateAppUser(input:AppUserDto!): String!
    deleteAppUserById(id:ID):String!
    createUserMoodCheckIn(input :MoodSourceIntensityRequestDto):String!
    createUserMoodSourceCheckIn(input :MoodSourceIntensityRequestDto):String!
    deleteUserMoodCheckInById(id:ID):String!
    deleteUserMoodSourceCheckInById(id:ID):String!
    createUserCourse(input:UserCourseDto):String!
    createCategory(input:CategoryDto):String!
    updateCategory(input:CategoryDto):Category
    deleteCategoryById(id:ID):String!
    createCourse(input:CourseDto):String!
    updateCourse(input:CourseDto):Course
    deleteCourseById(id:ID):String!
    createRole(input:RolesDto):String!
    updateRole(input:RolesDto):String!
    deleteRoleById(id:ID):String!
    updateUnitById(id:ID,input:UnitDto):String!
    updateChaptersById(id:ID,input:ChapterDto):String!
    saveUnit(input:UnitDto):String!
    saveChapter(input:ChapterDto):String!
    deleteUnitById(id:ID):String!
    deleteChapterById(id:ID):String!
    createTeam(input:TeamDto):String!
    updateTeam(id:ID,input:TeamDto):String!
    deleteTeamById(id:ID):String!
    saveSite(input:SiteDto):String!
    updateSite(id:ID,input:SiteDto):String!
    deleteSiteById(id:ID):String!
    saveSiftTimings(input:ShiftTimingsDto):String!
    updateSiftTimings(id:ID,input:ShiftTimingsDto):String!
    deleteSiftTimingsById(id:ID):String!
    saveCountry(input:CountryDto):String!
    #    uploadCountryData(file: CountryDto):String!
    updateCountryById(id:ID,input:CountryDto):String!
    deleteCountryById(Id:ID):String!
    saveCity(input:CityDto):String!
    #    uploadCityData(file: CountryDto!):String!
    updateCityById(id:ID,input:CityDto):String!
    deleteCityById(id:ID):String!
    saveRegion(input:RegionDto):String!
    #    uploadRegionData(file:CountryDto!):String!
    updateRegionById(id:ID,input:RegionDto):String!
    deleteRegionById(id:ID):String!
    createCounsellorSlot(input:TimeSlotDto):String!
    saveVendor(input:VendorDto):String!
    deleteVendorById(id:ID):String!
    updateVendor(id:ID,input:VendorDto):String!
}
type MtMoodInfo {
    id: ID!
    name: String
    emoji:String
    description:String!
    intensities:[MtMoodIntensity]

}

type MtMoodIntensity{
    id: ID!
    name: String
    emoji:String
}

type MtRoles{
    id: ID!
    name: String
}


input AppUserDto{
    firstName:String
    lastName:String
    email:String
    mobile:String
    alternateMobile:String
    empId:String
    roles:String
    educationDetails:String
    languages:String
    siteId:Int
    shiftTimingsId:Int
    teamId:Int
    bio:String
}
enum Roles{
    NONE
    EMPLOYEE
    WELL_BEING_MANGER
    COUNSELLOR
    VENDOR
    ADMIN
    DIRECTOR
    TEAM_MANAGER
    TEAM_LEADER
    OP_STREAM
}


type AppUser{
    id:ID!
    firstName:String
    lastName:String
    email:String
    userName:String
    mobile:String
    alternateMobile:String
    empId:String
    roles:Roles
    site:Site
    languages:String
    educationDetails:String
    shiftTimings:ShiftTimings
    team:Team
    bio:String
}

type FileEntity{
    fileId:ID!
    contentType:String!
    name:String!
    fileType:String!
    employees:[Course]
}

type ShiftTimings{
    id: ID!
    shiftName:String
    site:Site
    shiftStatAt:String
    shiftEndAt:String
    team:Team
}
input ShiftTimingsDto{
    siteId:Int
    teamId:Int
    shiftName:String
    shiftStatAt:String
    shiftEndAt:String
}
type CounsellorSlot{
    id: ID!
    counsellor:Counsellor
    startTime:LocalTime
    endTime:LocalTime
    slotDt:Date
    slotShift:SlotShift
    days:DayOfWeek
    slotStatus:SlotStatus
}
type Counsellor{
    id: ID!
    user:AppUser
    designation:String
    counsellorSlots:[CounsellorSlot]
    site:String
    educationalDetails:String
    languages:[String]
    shiftTimings:String
}
scalar LocalTime
scalar Date


enum SlotShift{
    MORNING
    AFTERNOON
    EVENING
}
enum SlotStatus{
    AVAILABLE
    BOOKED
    BLOCKED
    DELETED
}

enum  DayOfWeek{
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

type Vendor{
    id:ID!
    POC:String
    appUser:AppUser
}
input VendorDto{
    POC:String
    name: String
    pageNumber:Int
    pageSize:Int
    addedOn:String
    sortBy:String
    sideId:Int
    email:String
    userName:String
    mobile:String
    searchKey:String
    role:String
    empId:String
}