schema {
    query: Query
    mutation: Mutation
}

type Query {
    moodInfoById(id: ID): MtMoodInfo
    getAllMoodInfo:[MtMoodInfo]
    getAllMoodIntensity:[MtMoodIntensity]
    getAppUserById(id:ID):AppUser
    getAllAppUsers:[AppUser]
    mtRoleById(id:ID):MtRoles
    getAllMtRoles:[MtRoles]
    getAllCategory:[Category]
    getAllCourse:[Course]
    getAllUnit:[Unit]
    getAllChapters:[Chapter]
    getLearnPath(input:UnitDto):[Unit]
    getAllSitePagination(input:SiteDto):[MtSite]
    getAllTeamPagination(input:TeamDto):[MtTeam]
    getAllSite:[MtSite]
    getAllTeam:[MtTeam]
    getAllCountry:[MtCountry]
    getAllCities:[MtCity]
    getAllRegions:[MtRegion]
    getCounsellorSlot:[CounsellorSlot]
    getAllShiftTimings:[MtShiftTimings]
    getCounsellorSlotById(id:ID!):CounsellorSlot
    getAllCounsellor(input:CounsellorDto):[MtCounsellor]
    getAllVendor:[Vendor]
    getVendorById(id:ID):Vendor
    getAllVendorPagination(input:VendorDto):[Vendor]
    getAllAssessment:[MtAssessment]
    getAssessmentById(id:ID!):MtAssessment
    getQuestionById(id:ID!):MtQuestion
    getAnswersByQuestionId(id:ID!):[MtOptions]
    getAllQuestions:[MtQuestion]
    getOptionById(id:ID!):MtOptions
    getAllOption:[MtOptions]
    getAppointmentById(id:ID):UserAppointment
    getUserAppointmentCountById(id:ID):UserAppointmentResponse
    getAllAppointment:[UserAppointment]
    getCounsellorById(id:ID):MtCounsellor
    getAllEnumRoles:[Roles]
    getMiniSessionById(id:ID!):MiniSession
    getAllMiniSession:[MiniSession]
    downloads(id:String):FileDocument
    getMoodInfoById(id:ID):MtMoodInfo
    getAllMoodCheckIn:[UserMoodCheckIn]
}

type Mutation {
    createAppUser(input :AppUserDto): String!
    updateAppUser(input:AppUserDto!): String!
    deleteAppUserById(id:ID):String!
    createUserMoodCheckIn(input :MoodSourceIntensityRequestDto):String!
    createUserMoodSourceCheckIn(input :MoodSourceIntensityRequestDto):String!
    deleteUserMoodCheckInById(id:ID):String!
    deleteUserMoodSourceCheckInById(id:ID):String!
    createUserCourse(input:UserCourseDto):String!
    createCategory(input:CategoryDto):String!
    updateCategory(input:CategoryDto):String!
    deleteCategoryById(id:ID):String!
    createCourse(input:CourseDto):String!
    updateCourse(input:CourseDto):String!
    deleteCourseById(id:ID):String!
    createRole(input:RolesDto):String!
    updateRole(input:RolesDto):String!
    deleteRoleById(id:ID):String!
    updateUnitById(input:UnitDto):String!
    updateChaptersById(input:ChapterDto):String!
    saveUnit(input:UnitDto):String!
    saveChapter(input:ChapterDto):String!
    deleteUnitById(id:ID):String!
    deleteChapterById(id:ID):String!
    createTeam(input:TeamDto):String!
    updateTeam(input:TeamDto):String!
    deleteTeamById(id:ID):String!
    saveSite(input:SiteDto):String!
    updateSite(input:SiteDto):String!
    deleteSiteById(id:ID):String!
    saveSiftTimings(input:ShiftTimingsDto):String!
    updateSiftTimings(input:ShiftTimingsDto):String!
    deleteSiftTimingsById(id:ID):String!
    saveCountry(input:CountryDto):String!
    #    uploadCountryData(file: CountryDto):String!
    updateCountryById(input:CountryDto):String!
    deleteCountryById(Id:ID):String!
    saveCity(input:CityDto):String!
    #    uploadCityData(file: CountryDto!):String!
    updateCityById(input:CityDto):String!
    deleteCityById(id:ID):String!
    saveRegion(input:RegionDto):String!
    uploadRegionData(file:Upload!):String!
    updateRegionById(input:RegionDto):String!
    deleteRegionById(id:ID):String!
    createCounsellorSlot(input:TimeSlotDto):String!
    createCounsellor(input:CounsellorDto):String!
    updateCounsellorById(input:CounsellorDto):String!
    deleteCounsellorById(id:ID!):String!
    saveVendor(input:VendorDto):String!
    deleteVendorById(id:ID):String!
    updateVendor(input:VendorDto):String!
    rescheduledCounsellorSlot(input:TimeSlotDto):String!
    cancelCounsellorSlot(id:ID!):String!
    createQuestion(input:QuestionDto):String!
    updateQuestionById(input:QuestionDto):String!
    deleteQuestionById(id:ID):String!
    createOptions(input:OptionsDto):String!
    updateOptionById(input:OptionsDto):String!
    deleteOptionById(id:ID):String!
    createAssessment(input:AssessmentDto):String!
    updateAssessmentById(input:AssessmentDto):String!
    deleteAssessmentId(id:ID):String!
    createAppointment(input:TimeSlotDto):String!
    rescheduledUserAppointment(input:TimeSlotDto):String!
    saveMiniSession(input:MiniSessionDto):String!
    updateMiniSession(input:MiniSessionDto):String!
    deleteMiniSessionById(id:ID!):String!
    createGroup(input:GroupsDto):String!
    deleteFiles(id:String):String
    updateMoodInfoById(input:MoodInfoDto):String!
    deleteMoodInfoById(id:ID!):String!
}
scalar Upload

type MtMoodIntensity{
    name:String
    description:String
    emoji:String
    mtMoodInfo:MtMoodInfo
    sequence:Int
    score:Float
    userMoodCheckIns:[UserMoodCheckIn]
}

type MtRoles{
    id: ID!
    name: String
}
type UserAppointmentResponse{
    id:Int
    availableAppointmentCount:Int
    rescheduledAppointmentCount:Int
    canceledAppointmentCount:Int
    totalAppointmentsCount:Int
    blockedAppointmentCount:Int
    appUser:AppUser
}

input AppUserDto{
    id:Int
    firstName:String
    lastName:String
    userName:String
    email:String
    mobile:String
    alternateMobile:String
    empId:String
    roles:String
    siteId:Int
    shiftTimingsId:Int
    teamId:Int
    isActive:Boolean
    dateOfJoining:String
}
enum Roles{
    NONE
    EMPLOYEE
    WELL_BEING_MANGER
    COUNSELLOR
    VENDOR
    ADMIN
    DIRECTOR
    TEAM_MANAGER
    TEAM_LEADER
    OP_STREAM
}


type AppUser{
    id:ID!
    firstName:String
    lastName:String
    email:String
    userName:String
    mobile:String
    alternateMobile:String
    empId:String
    roles:Roles
    mtSite:MtSite
    mtTeam:MtTeam
    mtShiftTimings:MtShiftTimings
    isActive:Boolean
    dateOfJoining:Date
}

type FileEntity{
    fileId:ID!
    contentType:String!
    name:String!
    fileType:String!
    employees:[Course]
}

type MtShiftTimings{
    id: ID!
    shiftName:String
    mtSite:MtSite
    shiftStatAt:LocalTime
    shiftEndAt:LocalTime
    mtTeam:MtTeam
    isActive:Boolean
}
input ShiftTimingsDto{
    id:Int
    siteId:Int
    teamId:Int
    shiftName:String
    shiftStatAt:LocalTime
    shiftEndAt:LocalTime
    counsellorId:Int
    status:Boolean
}
type CounsellorSlot{
    id: ID!
    mtCounsellor:MtCounsellor
    startTime:LocalTime
    endTime:LocalTime
    slotDt:Date
    slotShift:SlotShift
    days:DayOfWeek
    slotStatus:SlotStatus
    isActive:Boolean
}
type MtCounsellor{
    id:Int
    appUser:AppUser
    counsellorSlots:[CounsellorSlot]
    mtShiftTimings:[MtShiftTimings]
    educationalDetails:[String]
    languages:[String]
    bio:String
    isActive:Boolean
}
scalar LocalTime
scalar Date


enum SlotShift{
    MORNING
    AFTERNOON
    EVENING
}
enum SlotStatus{
    AVAILABLE
    BOOKED
    BLOCKED
    DELETED
}

enum  DayOfWeek{
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}
input CounsellorDto {
    id:Int
    educationalDetails:[String]
    languages:[String]
    siteId:Int
    teamId:Int
    designation:String
    shiftTimingsId:Int
    teamManagerId:Int
    bio:String
    appUserName:String
    employeeId:String
    emailId:String
    contactNumber:String
    appUserId:Int
    pageNumber:Int
    pageSize:Int
    addedOn:String
    mtShiftTimings: ShiftTimingsDto
    mtSite:SiteDto
    mtTeam:TeamDto
    isActive:Boolean
}

type Vendor{
    id:ID!
    POC:String
    appUser:AppUser
    isActive:Boolean
}
input VendorDto{
    id:Int
    POC:String
    name: String
    pageNumber:Int
    pageSize:Int
    addedOn:String
    sortBy:String
    sideId:Int
    email:String
    userName:String
    mobile:String
    searchKey:String
    role:String
    empId:String
    isActive:Boolean
}

type UserAppointment {
    id:Int
    startTime:LocalTime
    endTime:LocalTime
    slotDate:Date
    slotShift:SlotShift
    days:DayOfWeek
    slotStatus:SlotStatus
    appUser:AppUser
    counsellor:MtCounsellor
    isCurrentAppointment:Boolean
    isActive:Boolean
}

type Groups{
    id:ID
    isActive:Boolean
    groupName:String
    text:String
    miniSession:MiniSession
    fileDetails:[FileDetails]
}
type MiniSession{
    id:ID
    isActive:Boolean
    groupsList:[Groups]
}
type FileDetails{
    id:ID
    isActive:Boolean
    fileId:String
    fileName:String
    fileType:String
    fileSize:Int
    fileContentType:String
}
input GroupsDto{
    miniSessionId:Int
    groupName:String
    text:String
    tags:[String]
    isActive:Boolean
}
input FileDetailsDto{
    id:Int
    fileId:String
    fileName:String
    fileType:String
    fileSize:Int
    contentType:String
}

type FileDocument{
    fileId:String
    fileName:String
    fileContentType:String
    fileSizeInBytes:String
    fileType:String
    publicUrl:String
    file:Byte
}
scalar Byte

input MiniSessionDto {
id:Int
isActive:Boolean
}
input MoodInfoDto{
    id:Int
    sequence:Int
    moodType:String
    intensityName:String
    emoji:String
}
type MtMoodInfo{
    name:String
    emoji:String
    intensities:[MtMoodIntensity]
    sequence:Int
    moodType:MoodType
    intensityName:String
}
enum MoodType{
    POSITIVE
    NEGATIVE
    NEUTRAL
    NONE
}

type UserMoodCheckIn{
    appUser:AppUser

    mtMoodInfo:MtMoodInfo

    mtMoodSource:MtMoodSource

    mtMoodIntensity:MtMoodIntensity

    description:String
}
type MtMoodSource{
    name:String
    description:String
    emoji:String
    sequence:Int
    category:CategoryType
    userMoodSourceCheckedIns:[UserMoodSourceCheckedIn]
}
enum CategoryType{
    WORK
    SELF
    NONE
    WORK_SELF
}
type UserMoodSourceCheckedIn{
    appUser:AppUser
    sources:[MtMoodSource]
    description:String
}